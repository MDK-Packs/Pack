<?xml version="1.0" encoding="UTF-8"?>
<package xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd" schemaVersion="1.7.2">
  <name>STM32G071B-DISCO_BSP</name>
  <vendor>Keil</vendor>
  <description>STMicroelectronics STM32G0 Series STM32G071B-DISCO Board Support Pack</description>
  <url>https://github.com/MDK-Packs/Pack/raw/master/STM32G071B-DISCO_BSP/</url>
  <repository type="git">https://github.com/MDK-Packs/STM32G071B-DISCO_BSP.git</repository>

  <releases>
    <release version="1.0.0" date="2021-09-29">
      Board description and documentation for STM32G071B-DISCO
      Synchronized with STM32CubeG0 Firmware Package version V1.5.0
      Drivers:
      - Board Drivers and Config files
      - CMSIS-Driver VIO
      Example projects:
      - CMSIS-RTOS2 Blinky (verify the basic tool setup)
      - CMSIS-RTOS2 Platform (configure the board hardware)
    </release>
  </releases>

  <keywords>
    <!-- keywords for indexing -->
    <keyword>ST</keyword>
    <keyword>Board Support Pack</keyword>
    <keyword>STM32G0</keyword>
    <keyword>STM32G071B-DISCO</keyword>
  </keywords>

  <requirements>
    <packages>
      <package vendor="ARM" name="CMSIS" version="5.8.0"/>
      <package vendor="Keil" name="STM32G0xx_DFP" version="1.3.0"/>
    </packages>
  </requirements>

  <conditions>
    <condition id="STM32G071">
      <description>STMicroelectronics STM32G071 Devices</description>
      <require Dvendor="STMicroelectronics:13" Dname="STM32G071*"/>
    </condition>

    <!-- STM32G071B-DISCO BSP Conditions -->
    <condition id="STM32G071B-DISCO BSP">
      <description>STMicroelectronics STM32G071B-DISCO BSP</description>
      <require condition="STM32G071"/>
      <require Cclass="Device" Cgroup="STM32Cube HAL" Csub="Common"/>
      <require Cclass="Device" Cgroup="STM32Cube HAL" Csub="GPIO"/>
      <require Cclass="Device" Cgroup="STM32Cube HAL" Csub="EXTI"/>
      <require Cclass="Device" Cgroup="STM32Cube HAL" Csub="UART"/>
    </condition>
    <condition id="STM32G071B-DISCO BSP LCD">
      <description>STMicroelectronics STM32G071B-DISCO BSP LCD</description>
      <require condition="STM32G071"/>
      <require Cclass="Board Support" Cgroup="Drivers" Csub="Basic I/O"/>
      <require Cclass="Board Support" Cgroup="Components" Csub="HX8347D"/>
    </condition>
    <condition id="STM32G071B-DISCO BSP PWRMON">
      <description>STMicroelectronics STM32G071B-DISCO BSP SD</description>
      <require condition="STM32G071"/>
      <require Cclass="Board Support" Cgroup="Drivers" Csub="Basic I/O"/>
    </condition>
    <condition id="STM32G071B-DISCO BSP USB PD">
      <description>STMicroelectronics STM32G071B-DISCO BSP USB PD</description>
      <require condition="STM32G071"/>
      <require Cclass="Board Support" Cgroup="Drivers" Csub="Basic I/O"/>
    </condition>
    <condition id="STM32G071B-DISCO VIO">
      <description>Virtual I/O STM32G071B-DISCO</description>
      <require condition="STM32G071"/>
      <require Cclass="Board Support" Cgroup="Drivers" Csub="Basic I/O"/>
    </condition>
  </conditions>

  <components>
    <bundle Cbundle="STM32G071B-DISCO" Cclass="Board Support" Cversion="1.2.1">
      <description>STMicroelectronics STM32G071B-DISCO Board</description>
      <doc>Drivers/STM32G071B-Discovery/STM32G071B-Discovery_BSP_User_Manual.chm</doc>
      <component Cgroup="Drivers" Csub="Basic I/O" condition="STM32G071B-DISCO BSP">
        <description>LEDs, push-buttons and COM ports for STM32G071B-DISCO Board</description>
        <files>
          <file category="header" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery.h"/>
          <file category="source" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery.c"/>
        </files>
      </component>
      <component Cgroup="Drivers" Csub="LCD" condition="STM32G071B-DISCO BSP LCD">
        <description>LCD for STMicroelectronics STM32G071B-DISCO Board</description>
        <files>
          <file category="header" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery_lcd.h"/>
          <file category="source" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery_lcd.c"/>
        </files>
      </component>
      <component Cgroup="Drivers" Csub="PWRMON" condition="STM32G071B-DISCO BSP PWRMON">
        <description>Power Monitor for STMicroelectronics STM32G071B-DISCO Board</description>
        <files>
          <file category="header" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery_pwrmon.h"/>
          <file category="source" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery_pwrmon.c"/>
        </files>
      </component>
      <component Cgroup="Drivers" Csub="USB PD" condition="STM32G071B-DISCO BSP USB PD">
        <description>USB Type C power delivery for STMicroelectronics STM32G071B-DISCO Board</description>
        <files>
          <file category="header" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery_usbpd_pwr.h"/>
          <file category="source" name="Drivers/STM32G071B-Discovery/stm32g071b_discovery_usbpd_pwr.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="CBTL08GP053" condition="STM32G071" Cversion="1.0.1">
        <description>CBTL08GP053 Component Driver</description>
        <files>
          <file category="header" name="Drivers/Components/cbtl08gp053/cbtl08gp053.h"/>
          <file category="source" name="Drivers/Components/cbtl08gp053/cbtl08gp053.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="HX8347D" condition="STM32G071" Cversion="1.1.2">
        <description>HX8347D Component Driver</description>
        <files>
          <file category="header" name="Drivers/Components/hx8347d/hx8347d.h"/>
          <file category="source" name="Drivers/Components/hx8347d/hx8347d.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="INA230" condition="STM32G071" Cversion="1.0.0">
        <description>INA230 Component Driver</description>
        <files>
          <file category="source" name="Drivers/Components/ina230/ina230.h"/>
          <file category="source" name="Drivers/Components/ina230/ina230.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="SN65DP141" condition="STM32G071" Cversion="1.0.2">
        <description>SN65DP141 Component Driver</description>
        <files>
          <file category="header" name="Drivers/Components/sn65dp141/sn65dp141.h"/>
          <file category="source" name="Drivers/Components/sn65dp141/sn65dp141.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="SSD1315" condition="STM32G071" Cversion="1.1.0">
        <description>SSD1315 Component Driver</description>
        <files>
          <file category="header" name="Drivers/Components/ssd1315/ssd1315.h"/>
          <file category="source" name="Drivers/Components/ssd1315/ssd1315.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="ST7735" condition="STM32G071" Cversion="1.1.5">
        <description>ST7735 Component Driver</description>
        <files>
          <file category="header" name="Drivers/Components/st7735/st7735.h"/>
          <file category="source" name="Drivers/Components/st7735/st7735.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="STLM75" condition="STM32G071" Cversion="2.0.2">
        <description>STLM75 Component Driver</description>
        <files>
          <file category="header" name="Drivers/Components/stlm75/stlm75.h"/>
          <file category="source" name="Drivers/Components/stlm75/stlm75.c"/>
        </files>
      </component>
      <component Cgroup="Components" Csub="TUSB546" condition="STM32G071" Cversion="2.0.0">
        <description>TUSB546 Component Driver</description>
        <files>
          <file category="header" name="Drivers/Components/tusb546/tusb546.h"/>
          <file category="source" name="Drivers/Components/tusb546/tusb546.c"/>
        </files>
      </component>
    </bundle>

    <!-- VIO component for STM32G071B-DISCO -->
    <component Cclass="CMSIS Driver" Cgroup="VIO" Csub="Board" Cvariant="STM32G071B-DISCO" Cversion="1.2.0" Capiversion="0.1.0" condition="STM32G071B-DISCO VIO">
      <description>Virtual I/O implementation for STM32G071B-DISCO</description>
      <RTE_Components_h>
        #define RTE_VIO_BOARD
        #define RTE_VIO_STM32G071B_DISCO
      </RTE_Components_h>
      <files>
        <file category="source" name="Drivers/Platform/vio_STM32G071B-DISCO.c"/>
      </files>
    </component>
  </components>

  <boards>
    <!-- STM32G071B-DISCO Board Support-->
    <board vendor="STMicroelectronics" name="STM32G071B-DISCO" revision="Rev.C"
           salesContact="https://www.st.com/content/st_com/en/contact-us.html"
           orderForm   ="https://www.st.com/en/evaluation-tools/stm32g071b-disco.html">
      <description>STM32 Discovery development board with STM32G071E MCU</description>
      <image small="Images/Discovery_small.jpg"
             large="Images/Discovery_large.jpg" public="true"/>
      <book category="overview"  name="https://www.st.com/en/evaluation-tools/stm32g071b-disco.html" title="STM32 Discovery board"/>
      <book category="manual"    name="https://www.st.com/resource/en/user_manual/um2401-stm32g0-discovery-kit-for-usb-typec-and-power-delivery-stmicroelectronics.pdf" title="User Manual" public="true"/>
      <book category="schematic" name="https://www.st.com/resource/en/schematic_pack/mb1378-c02_schematic.pdf" title="Schematics" public="true"/>
      <mountedDevice    deviceIndex="0" Dvendor="STMicroelectronics:13" Dname="STM32G071RBTx"/>
      <compatibleDevice deviceIndex="0" Dvendor="STMicroelectronics:13" DsubFamily="STM32G071"/>
      <feature type="ODbg"      n="1"              name="On-board ST-LINK-V3E"/>
      <feature type="Other"     n="3"              name="Bidirectional current and power monitors with I2C interface"/>
      <feature type="Other"     n="1"              name="DC/DC converter to sustain power supply with VBUS"/>
      <feature type="LCD"       n="1"  m="128.64"  name="OLED LCD module with SPI interface"/>
	    <feature type="LED"       n="4"              name="User status LEDs about USB Type-C configuration"/>
	    <feature type="LED"       n="3"              name="Power and ST-LINK communication"/>
      <feature type="Joystick"  n="1"              name="4-way joystick with selection button"/>
      <feature type="ConnOther" n="1"              name="8-pin user extension connector"/>
      <feature type="PWR"       n="5"              name="ST-LINK USB VBUS"/>
      <feature type="PWR"       n="5"              name="USB Type-C™ VBUS"/>
      <debugInterface adapter="ST-Link" connector="Micro-USB"/>
      <debugProbe connector="Micro-USB" debugClock="10000000" debugLink="swd" name="ST-Link"/>
    </board>
  </boards>

  <examples>
    <example name="Blinky" doc="README.md" folder="Projects/Blinky">
      <description>CMSIS-RTOS2 Blinky example with VIO</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="Blinky.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <component Cclass="CMSIS" Cgroup="RTOS"/>
        <component Cclass="CMSIS Driver" Cgroup="VIO"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Platform" doc="README.md" folder="Projects/Platform">
      <description>CMSIS-RTOS2 Platform example with VIO</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="Platform.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <component Cclass="CMSIS" Cgroup="RTOS"/>
        <component Cclass="CMSIS Driver" Cgroup="VIO"/>
        <category>Getting Started</category>
      </attributes>
    </example>

  <!-- G0 CubeMX FW Pack examples -->
    <!--example name="Demonstrations: USBPD_Analyzer" doc="README.md" folder="Projects_ST/Demonstrations/USBPD_Analyzer">
      <description>This demonstration firmware is based on STM32Cube and describes how to use USB Power Delivery (USB-PD) feature based on STM32G071B-DISCO boards.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="Project.STM32G071B-DISCO_USBPD_Analyzer.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <component Cclass="CMSIS" Cgroup="RTOS"/>
        <category>Getting Started</category>
      </attributes>
    </example-->

    <example name="Examples: CORTEXM_ModePrivilege" doc="README.md" folder="Projects_ST/Examples/Cortex/CORTEXM_ModePrivilege">
      <description>How to modify the Thread mode privilege access and stack. Thread mode is entered on reset or when returning from an exception.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CORTEXM_ModePrivilege.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: CORTEXM_MPU" doc="README.md" folder="Projects_ST/Examples/Cortex/CORTEXM_MPU">
      <description>Presentation of the MPU feature. This example configures a memory area as privileged read-only, and attempts to perform read and write operations in different modes.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CORTEXM_MPU.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: CORTEXM_ProcessStack" doc="README.md" folder="Projects_ST/Examples/Cortex/CORTEXM_ProcessStack">
      <description>How to modify the Thread mode stack. Thread mode is entered on reset, and can be entered as a result of an exception return.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CORTEXM_ProcessStack.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: CORTEXM_SysTick" doc="README.md" folder="Projects_ST/Examples/Cortex/CORTEXM_SysTick">
      <description>How to use the default SysTick configuration with a 1 ms timebase to toggle LEDs.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CORTEXM_SysTick.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: CRC_Bytes_Stream_7bit_CRC" doc="README.md" folder="Projects_ST/Examples/CRC/CRC_Bytes_Stream_7bit_CRC">
      <description>How to configure the CRC using the HAL API. The CRC (cyclic redundancy check) calculation unit computes 7-bit CRC codes derived from buffers of 8-bit data (bytes). The user-defined generating polynomial is manually set to 0x65, that is, X^7 + X^6 + X^5 + X^2 + 1, as used in the Train Communication Network, IEC 60870-5[17].</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CRC_Bytes_Stream_7bit_CRC.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: CRC_Data_Reversing_16bit_CRC" doc="README.md" folder="Projects_ST/Examples/CRC/CRC_Data_Reversing_16bit_CRC">
      <description>How to configure the CRC using the HAL API. The CRC (cyclic redundancy check) calculation unit computes a 16-bit CRC code derived from a buffer of 8-bit data (bytes). Input and output data reversal features are enabled. The user-defined generating polynomial is manually set to 0x1021, that is, X^16 + X^12 + X^5 + 1 which is the CRC-CCITT generating polynomial.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CRC_Data_Reversing_16bit_CRC.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: CRC_Example" doc="README.md" folder="Projects_ST/Examples/CRC/CRC_Example">
      <description>How to configure the CRC using the HAL API. The CRC (cyclic redundancy check) calculation unit computes the CRC code of a given buffer of 32-bit data words, using a fixed generator polynomial (0x4C11DB7).</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CRC_Example.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: CRC_UserDefinedPolynomial" doc="README.md" folder="Projects_ST/Examples/CRC/CRC_UserDefinedPolynomial">
      <description>How to configure the CRC using the HAL API. The CRC (cyclic redundancy check) calculation unit computes the 8-bit CRC code for a given buffer of 32-bit data words, based on a user-defined generating polynomial.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CRC_UserDefinedPolynomial.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: DMA_FLASHToRAM" doc="README.md" folder="Projects_ST/Examples/DMA/DMA_FLASHToRAM">
      <description>How to use a DMA to transfer a word data buffer from Flash memory to embedded SRAM through the HAL API.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="DMA_FLASHToRAM.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: FLASH_EraseProgram" doc="README.md" folder="Projects_ST/Examples/FLASH/FLASH_EraseProgram">
      <description>How to configure and use the FLASH HAL API to erase and program the internal Flash memory.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="FLASH_EraseProgram.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: GPIO_IOToggle" doc="README.md" folder="Projects_ST/Examples/GPIO/GPIO_IOToggle">
      <description>	How to configure and use GPIOs through the HAL API.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="GPIO_IOToggle.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: IWDG_Reset" doc="README.md" folder="Projects_ST/Examples/IWDG/IWDG_Reset">
      <description>How to handle the IWDG reload counter and simulate a software fault that generates an MCU IWDG reset after a preset laps of time.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="IWDG_Reset.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: IWDG_WindowMode" doc="README.md" folder="Projects_ST/Examples/IWDG/IWDG_WindowMode">
      <description>How to periodically update the IWDG reload counter and simulate a software fault that generates an MCU IWDG reset after a preset laps of time.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="IWDG_WindowMode.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: PWR_LPRUN" doc="README.md" folder="Projects_ST/Examples/PWR/PWR_LPRUN">
      <description>How to enter and exit the Low-power run mode.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="PWR_LPRUN.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: RCC_SwitchClock" doc="README.md" folder="Projects_ST/Examples/RCC/RCC_SwitchClock">
      <description>Switch of the system clock (SYSCLK) from Low frequency clock to high frequency clock, using the RCC HAL API.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="RCC_SwitchClock.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples: WWDG_Example" doc="README.md" folder="Projects_ST/Examples/WWDG/WWDG_Example">
      <description>Configuration of the HAL API to periodically update the WWDG counter and simulate a software fault that generates an MCU WWDG reset when a predefined time period has elapsed.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="WWDG_Example.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>

    <example name="Examples_LL: DMA_CopyFromFlashToMemory_Init" doc="README.md" folder="Projects_ST/Examples_LL/DMA/DMA_CopyFromFlashToMemory_Init">
      <description>How to use a DMA channel to transfer a word data buffer from Flash memory to embedded SRAM. The peripheral initialization uses LL initialization functions to demonstrate LL init usage.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="DMA_CopyFromFlashToMemory_Init.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>

    <example name="Examples_MIX: CRC_PolynomialUpdate" doc="README.md" folder="Projects_ST/Examples_MIX/CRC/CRC_PolynomialUpdate">
      <description>How to use the CRC peripheral through the STM32G0xx CRC HAL and LL API.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="CRC_PolynomialUpdate.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>
    <example name="Examples_MIX: DMA_FLASHToRAM" doc="README.md" folder="Projects_ST/Examples_MIX/DMA/DMA_FLASHToRAM">
      <description>How to use a DMA to transfer a word data buffer from Flash memory to embedded SRAM through the STM32G0xx DMA HAL and LL API. The LL API is used for performance improvement.</description>
      <board name="STM32G071B-DISCO" vendor="STMicroelectronics"/>
      <project>
        <environment name="uv" load="DMA_FLASHToRAM.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>

  </examples>
</package>
